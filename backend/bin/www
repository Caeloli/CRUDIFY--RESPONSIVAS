#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("backend:server");

const http = require("http");
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);


/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
(async function () {
  try {
    /*
    const { Pool } = require('pg');
    const pool = new Pool(dbConfigData);
    await assignSequelize(dbConfigData);
    const sequelize = await getSequelize();
    await pool.connect();
    console.log("Connected to PostgreSQL database");
    await app.use((req, res, next) => {
      console.log("Enter in assignment of request methods");
      if(!pool && !sequelize){
        console.error("Pool nor sequelize are defined");
        return res.status(500).json({message: "Internal Server Error"});
      }
      req.postgresdb = pool;
      req.sequelize = sequelize;
      req.testString = "Estoy harto de estammada";
      next();
    });
    */

    server.listen(port, () => {
      console.log(`Server is listening on port ${port}`);
    });

    server.on("error", (error) => {
      console.error("Server error:", error.message);
    });

    server.on("listening", () => {
      console.log("Server is now listening");
    });
  } catch (error) {
    console.error("Error connecting to PostgreSQL database:", error.message);
  }
})();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
